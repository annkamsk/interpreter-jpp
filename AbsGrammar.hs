-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGrammar where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef TypeOrVoid Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass Ident Expr
    | Incr Ident
    | Decr Ident
    | Ret Expr
    | VRet
    | Cond Expr Block
    | CondElse Expr Block Block
    | While Expr Block
    | Print Expr
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type = Int | Str | Bool | Array Type
  deriving (Eq, Ord, Show, Read)

data TypeOrVoid = TVVoid | TVType Type
  deriving (Eq, Ord, Show, Read)

data Expr
    = ArraySet Expr Expr Expr
    | ArrayPush Expr Expr
    | ArrayRem Expr Expr
    | ArrayGet Expr Expr
    | ArrayLen Expr
    | EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp Ident [ExprOrRef]
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data ExprOrRef = ExprRefE Expr | ExprRefR Ident
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Concat | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

