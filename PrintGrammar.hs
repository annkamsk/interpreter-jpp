{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGrammar.
--   Generated by the BNF converter.

module PrintGrammar where

import qualified AbsGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammar.Ident where
  prt _ (AbsGrammar.Ident i) = doc (showString i)

instance Print AbsGrammar.Program where
  prt i e = case e of
    AbsGrammar.Program topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print AbsGrammar.TopDef where
  prt i e = case e of
    AbsGrammar.FnDef typeorvoid id args block -> prPrec i 0 (concatD [prt 0 typeorvoid, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGrammar.TopDef] where
  prt = prtList

instance Print AbsGrammar.Arg where
  prt i e = case e of
    AbsGrammar.Arg type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.Arg] where
  prt = prtList

instance Print AbsGrammar.Block where
  prt i e = case e of
    AbsGrammar.Block stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [AbsGrammar.Stmt] where
  prt = prtList

instance Print AbsGrammar.Stmt where
  prt i e = case e of
    AbsGrammar.Empty -> prPrec i 0 (concatD [doc (showString ";")])
    AbsGrammar.BStmt block -> prPrec i 0 (concatD [prt 0 block])
    AbsGrammar.Decl type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    AbsGrammar.Ass id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsGrammar.Incr id -> prPrec i 0 (concatD [prt 0 id, doc (showString "++"), doc (showString ";")])
    AbsGrammar.Decr id -> prPrec i 0 (concatD [prt 0 id, doc (showString "--"), doc (showString ";")])
    AbsGrammar.Ret expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    AbsGrammar.VRet -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    AbsGrammar.Cond expr block -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGrammar.CondElse expr block1 block2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block1, doc (showString "else"), prt 0 block2])
    AbsGrammar.While expr block -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGrammar.Print expr -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString ";")])
    AbsGrammar.SExp expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammar.Item where
  prt i e = case e of
    AbsGrammar.NoInit id -> prPrec i 0 (concatD [prt 0 id])
    AbsGrammar.Init id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.Item] where
  prt = prtList

instance Print AbsGrammar.Type where
  prt i e = case e of
    AbsGrammar.Int -> prPrec i 0 (concatD [doc (showString "int")])
    AbsGrammar.Str -> prPrec i 0 (concatD [doc (showString "string")])
    AbsGrammar.Bool -> prPrec i 0 (concatD [doc (showString "boolean")])
    AbsGrammar.Array type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])

instance Print AbsGrammar.TypeOrVoid where
  prt i e = case e of
    AbsGrammar.TVVoid -> prPrec i 0 (concatD [doc (showString "void")])
    AbsGrammar.TVType type_ -> prPrec i 0 (concatD [prt 0 type_])

instance Print AbsGrammar.Expr where
  prt i e = case e of
    AbsGrammar.ArraySet expr1 expr2 expr3 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "."), doc (showString "set"), doc (showString "("), prt 0 expr2, doc (showString ","), prt 0 expr3, doc (showString ")")])
    AbsGrammar.ArrayPush expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "."), doc (showString "push"), doc (showString "("), prt 0 expr2, doc (showString ")")])
    AbsGrammar.ArrayRem expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "."), doc (showString "remove"), doc (showString "("), prt 0 expr2, doc (showString ")")])
    AbsGrammar.ArrayGet expr1 expr2 -> prPrec i 6 (concatD [prt 6 expr1, doc (showString "."), doc (showString "get"), doc (showString "("), prt 0 expr2, doc (showString ")")])
    AbsGrammar.ArrayLen expr -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), doc (showString "len")])
    AbsGrammar.EVar id -> prPrec i 6 (concatD [prt 0 id])
    AbsGrammar.ELitInt n -> prPrec i 6 (concatD [prt 0 n])
    AbsGrammar.ELitTrue -> prPrec i 6 (concatD [doc (showString "true")])
    AbsGrammar.ELitFalse -> prPrec i 6 (concatD [doc (showString "false")])
    AbsGrammar.EApp id exprorrefs -> prPrec i 6 (concatD [prt 0 id, doc (showString "("), prt 0 exprorrefs, doc (showString ")")])
    AbsGrammar.EString str -> prPrec i 6 (concatD [prt 0 str])
    AbsGrammar.Neg expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    AbsGrammar.Not expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    AbsGrammar.EMul expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    AbsGrammar.EAdd expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    AbsGrammar.ERel expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    AbsGrammar.EAnd expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    AbsGrammar.EOr expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])

instance Print AbsGrammar.ExprOrRef where
  prt i e = case e of
    AbsGrammar.ExprRefE expr -> prPrec i 0 (concatD [prt 0 expr])
    AbsGrammar.ExprRefR id -> prPrec i 0 (concatD [doc (showString "&"), prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.ExprOrRef] where
  prt = prtList

instance Print AbsGrammar.AddOp where
  prt i e = case e of
    AbsGrammar.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    AbsGrammar.Concat -> prPrec i 0 (concatD [doc (showString "++")])
    AbsGrammar.Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print AbsGrammar.MulOp where
  prt i e = case e of
    AbsGrammar.Times -> prPrec i 0 (concatD [doc (showString "*")])
    AbsGrammar.Div -> prPrec i 0 (concatD [doc (showString "/")])
    AbsGrammar.Mod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print AbsGrammar.RelOp where
  prt i e = case e of
    AbsGrammar.LTH -> prPrec i 0 (concatD [doc (showString "<")])
    AbsGrammar.LE -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsGrammar.GTH -> prPrec i 0 (concatD [doc (showString ">")])
    AbsGrammar.GE -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsGrammar.EQU -> prPrec i 0 (concatD [doc (showString "==")])
    AbsGrammar.NE -> prPrec i 0 (concatD [doc (showString "!=")])

